#!/usr/bin/env perl
use v5.14.0;
use warnings;

use File::Find;
use List::Util qw(max uniq);
use CPAN::Meta::Requirements;
use Path::Tiny;
use Perl::PrereqScanner;
use Scalar::Util qw(looks_like_number);
use Cwd;
use Process::Status;

use Getopt::Long::Descriptive;

my ($opt, $usage) = describe_options(
  '%c %o',
  [ 'outfile|o=s', 'output file (default: cpanfile)', { default => 'cpanfile' } ],
);

$usage->die({ post_text => "\nUnknown arguments [@ARGV]\n" }) if @ARGV;

my $outfile = $opt->outfile;

my $main_req = requirements_for_dirs(qw( lib t ));
my $dev_req  = requirements_for_dirs(qw( dev xt ));

# Extra modules that aren't explicitly used anywhere but are needed
$main_req->add_minimum('JMAP::Tester'            => '0.101'); # Futures + Role::Tiny fix
$main_req->add_minimum('JMAP::Tester::WebSocket' => '0.004'); # Futures + Role::Tiny fix
$main_req->add_minimum('LWP::UserAgent'          => '6.56');  # https://github.com/libwww-perl/libwww-perl/pull/385

print "Writing out new cpanfile to '$outfile'...\n";

print_requirements($main_req, $dev_req);

print "done, check `git diff` for changes\n";

exit;

sub requirements_for_dirs {
  my (@dirs) = @_;

  my $requirements = CPAN::Meta::Requirements->new;

  for my $dir (@dirs) {
    print "Scanning '$dir' ...\n";

    scan_dir($requirements, $dir);
  }

  return $requirements;
}

sub scan_dir {
  my ($requirements, $dir) = @_;

  my @files = `git ls-files $dir`;
  die "git ls-files failed? (Output: @files)\n"
    unless Process::Status->new->is_success;

  chomp for @files;

  @files = grep {;
    (
         $_ =~ /\.(pl|PL|pm|t)$/
      || $_ =~ /^(dev)\//
    )
    && -f $_
  } @files;

  scan_file($requirements, $_) for @files;
}

sub scan_file {
  my ($requirements, $file) = @_;

  $requirements->add_requirements(
    Perl::PrereqScanner->new->scan_file($file)
  );
}

sub print_requirements {
  my ($main, $dev) = @_;

  my @lines = <<EOF;
# !!! DO NOT EDIT THIS FILE !!!
#
# Instead, run dev/build-cpanfile
#
# If you have prereqs that aren't explicitly loaded in any file
# but are required due to dynamic usage, put them in dev/build-cpanfile
#

EOF

  my @phases = (
    [ $main, undef, 0, undef ],
    [ $dev,  "on develop => sub {\n", 2, "};\n" ],
  );

  for my $phase (@phases) {
    my ($requirements, $prefix, $indent, $suffix) = @$phase;

    my $prereqs = $requirements->as_string_hash;

    push @lines, $prefix if defined $prefix;

    my $width = 55 - $indent;

    for my $prereq (sort keys %$prereqs) {
      # it's perl!
      next if $prereq eq 'perl';
      next if $prereq eq 'jmaptest';

      # we bundle these

      # these are test libraries in ./t
      next if $prereq =~ /^t::/;

      # This is us
      next if $prereq =~ /JMAP::TestSuite/;

      my $v = $prereqs->{$prereq} || 0;
      $v = qq{"$v"} unless looks_like_number($v);

      $prereq = "'$prereq'";
      $v = "'$v';";

      push @lines, sprintf "%srequires %*s => %10s\n", q{ } x $indent, -$width, $prereq, $v;
    }

    push @lines, $suffix if defined $suffix;
  }

  my $cpanfile = Path::Tiny->new($outfile);
  $cpanfile->spew(\@lines);
}
