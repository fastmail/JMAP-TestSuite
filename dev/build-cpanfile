#!/usr/bin/env perl

use strict;
use warnings;

use File::Find;
use List::Util qw(max uniq);
use CPAN::Meta::Requirements;
use Path::Tiny;
use Perl::PrereqScanner;
use Scalar::Util qw(looks_like_number);
use Cwd;
use Process::Status;

use Getopt::Long::Descriptive;

# Extra modules that aren't explicitly used anywhere but are needed
my %extra_modules = (
  'JMAP::Tester'            => '0.101', # Futures + Role::Tiny fix
  'JMAP::Tester::WebSocket' => '0.004', # Futures + Role::Tiny fix
  'LWP::UserAgent'          => '6.56',  # https://github.com/libwww-perl/libwww-perl/pull/385
);

my ($opt, $usage) = describe_options(
  '%c %o',
  [ 'outfile|o=s', 'output file (default: cpanfile)', { default => 'cpanfile' } ],
);

$usage->die({ post_text => "\nUnknown arguments [@ARGV]\n" }) if @ARGV;

my $outfile = $opt->outfile;

my $result = CPAN::Meta::Requirements->new;

print "Scanning '.' ...\n";

scan_dir('.');

print "Writing out new cpanfile to '$outfile'...\n";

print_prereqs($result);

print "done, check `git diff` for changes\n";

exit;

sub scan_dir {
  my @files = `git ls-files`;
  die "git ls-files failed? (Output: @files)\n"
    unless Process::Status->new->is_success;

  chomp for @files;

  @files = grep {;
    (
         $_ =~ /\.(pl|PL|pm|t)$/
      || $_ =~ /^(dev)\//
    )
    && -f $_
  } @files;

  scan_file($_) for @files;
}

sub scan_file {
  my $file = shift;

  $result->add_requirements(
    Perl::PrereqScanner->new->scan_file($file)
  );
}

sub print_prereqs {
  my $prereqs = shift->as_string_hash;

  my @lines = <<EOF;
# !!! DO NOT EDIT THIS FILE !!!
#
# Instead, run dev/build-cpanfile
#
# If you have prereqs that aren't explicitly loaded in any file
# but are required due to dynamic usage, put them in dev/build-cpanfile
#

EOF

  for my $prereq (uniq sort (keys %$prereqs, keys %extra_modules)) {
    # it's perl!
    next if $prereq eq 'perl';
    next if $prereq eq 'jmaptest';

    # we bundle these

    # these are test libraries in ./t
    next if $prereq =~ /^t::/;

    # This is us
    next if $prereq =~ /JMAP::TestSuite/;

    my $v = $prereqs->{$prereq} || $extra_modules{$prereq} || 0;
    $v = qq{"$v"} unless looks_like_number($v);

    $prereq = "'$prereq'";
    $v = "'$v';";

    push @lines, sprintf("requires %-55s => %10s\n", $prereq, $v);
  }

  my $cpanfile = Path::Tiny->new($outfile);
  $cpanfile->spew(\@lines);
}

